name: Update Paper Server

on:
  workflow_dispatch:
    inputs:
      minecraft_version:
        description: 'Minecraft version (e.g. 1.21.6)'
        required: true
        type: string
      project:
        description: 'Project type (paper, waterfall, etc)'
        required: false
        default: 'paper'
        type: string

permissions:
  contents: write

jobs:
  download-paper:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup variables
      id: vars
      run: |
        filename="paper-${{ github.event.inputs.minecraft_version }}.jar"
        echo "filename=$filename" >> $GITHUB_OUTPUT
        echo "filepath=paper/$filename" >> $GITHUB_OUTPUT

    - name: Get latest Paper build
      id: paper-api
      env:
        PROJECT: ${{ github.event.inputs.project }}
        VERSION: ${{ github.event.inputs.minecraft_version }}
        USER_AGENT: github-actions-paper-updater/1.0.0
      run: |
        # Получаем данные о сборках
        response=$(curl -s -H "User-Agent: $USER_AGENT" \
          "https://fill.papermc.io/v3/projects/$PROJECT/versions/$VERSION/builds")
        
        # Проверяем наличие ошибки (если ответ не массив)
        if echo "$response" | jq -e 'type == "object" and has("error")' > /dev/null; then
          error_msg=$(echo "$response" | jq -r '.error')
          echo "::error ::API error: $error_msg"
          exit 1
        fi
        
        # Проверяем что ответ - непустой массив
        if echo "$response" | jq -e 'type != "array" or length == 0' > /dev/null; then
          echo "::error ::No builds found for $PROJECT $VERSION"
          exit 1
        fi
        
        # Извлекаем последний стабильный билд
        paper_url=$(echo "$response" | jq -r \
          'map(select(.channel == "STABLE")) | 
           if length > 0 then first.downloads."server:default".url 
           else first.downloads."server:default".url end')
        
        if [ "$paper_url" = "null" ] || [ -z "$paper_url" ]; then
          echo "::error ::Failed to extract download URL"
          exit 1
        fi
        
        echo "url=$paper_url" >> $GITHUB_OUTPUT

    - name: Download PaperMC server
      run: |
        mkdir -p paper
        curl -sSL -o "${{ steps.vars.outputs.filepath }}" \
          "${{ steps.paper-api.outputs.url }}"

    - name: Commit changes
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add paper/
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit"
        else
          git commit -m "Update Paper to ${{ github.event.inputs.minecraft_version }}"
          git push
        fi